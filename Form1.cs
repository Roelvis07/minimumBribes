using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace minimumBribes
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            //List<int> q = new List<int> { 2, 1, 5, 3, 4 }; //3
            //List<int> q = new List<int> { 2, 5, 1, 3, 4 }; // too chaotic
            //List<int> q = new List<int> { 1, 2, 5, 3, 4, 7, 8, 6 }; //4
            //List<int> q = new List<int> { 1, 2, 5, 3, 7, 8, 6, 4 }; //6 -> 7
            //List<int> q = new List<int> { 5, 1, 2, 3, 7, 8, 6, 4 };// too chaotic
            //List<int> q = new List<int> { 3, 1, 5, 4, 2 }; //5
            List<int> q = new List<int>//1201
            //int[] q = new int[] 
            {
                3, 1, 5, 4, 2, 8, 6, 10, 11, 9, 13, 7, 15, 12, 17, 18, 19, 20, 16, 14, 23, 21, 25, 24, 27, 26, 22, 30, 
                31, 29, 28, 34, 33, 32, 37, 35, 39, 40, 41, 38, 36, 44, 45, 46, 43, 42, 49, 48, 47, 52, 53, 50, 55, 54, 
                51, 58, 59, 60, 57, 56, 63, 64, 61, 66, 65, 68, 69, 67, 62, 72, 71, 74, 70, 76, 75, 73, 79, 78, 81, 82, 
                77, 84, 83, 86, 80, 88, 87, 85, 91, 90, 89, 94, 92, 96, 95, 93, 99, 98, 101, 100, 103, 97, 105, 104, 102, 
                108, 109, 110, 106, 112, 111, 114, 115, 113, 107, 118, 117, 116, 121, 122, 120, 119, 125, 124, 123, 128, 
                127, 126, 131, 129, 133, 134, 132, 136, 130, 138, 137, 135, 141, 139, 143, 144, 142, 140, 147, 145, 149, 
                148, 146, 152, 151, 154, 153, 150, 157, 158, 159, 156, 155, 162, 163, 164, 160, 166, 167, 165, 161, 170, 
                171, 169, 173, 172, 168, 176, 175, 174, 179, 178, 181, 182, 180, 177, 185, 184, 183, 188, 187, 186, 191, 
                192, 190, 189, 195, 196, 194, 193, 199, 197, 201, 200, 198, 204, 203, 206, 207, 208, 205, 202, 211, 210, 
                213, 212, 209, 216, 215, 214, 219, 218, 217, 222, 221, 224, 223, 220, 227, 226, 225, 230, 231, 229, 233, 
                234, 235, 232, 228, 238, 236, 240, 241, 242, 239, 237, 245, 246, 244, 243, 249, 250, 248, 247, 253, 254, 
                252, 256, 251, 258, 255, 260, 261, 259, 257, 264, 263, 266, 267, 262, 269, 265, 271, 272, 273, 270, 268, 
                276, 275, 278, 274, 280, 279, 277, 283, 282, 281, 286, 287, 284, 289, 288, 285, 292, 293, 291, 295, 294, 
                290, 298, 296, 300, 299, 297, 303, 302, 301, 306, 305, 304, 309, 307, 311, 312, 310, 308, 315, 314, 313, 
                318, 316, 320, 321, 317, 323, 319, 325, 326, 324, 322, 329, 327, 331, 332, 330, 334, 333, 328, 337, 336, 
                335, 340, 338, 342, 341, 344, 343, 339, 347, 345, 349, 350, 348, 346, 353, 352, 351, 356, 355, 358, 359, 
                357, 361, 354, 363, 362, 360, 366, 365, 364, 369, 368, 367, 372, 370, 374, 371, 376, 373, 378, 379, 377, 
                375, 382, 380, 384, 385, 383, 381, 388, 389, 390, 386, 392, 387, 394, 393, 391, 397, 398, 399, 396, 395, 
                402, 403, 404, 401, 400, 407, 405, 409, 406, 411, 412, 410, 414, 408, 416, 415, 413, 419, 420, 421, 418, 
                423, 417, 425, 426, 422, 428, 424, 430, 431, 429, 433, 432, 427, 436, 435, 434, 439, 440, 437, 442, 438, 
                444, 441, 446, 445, 443, 449, 447, 451, 448, 453, 452, 450, 456, 457, 454, 459, 455, 461, 458, 463, 460, 
                465, 464, 462, 468, 467, 470, 469, 472, 471, 466, 475, 473, 477, 476, 479, 478, 474, 482, 481, 484, 480, 
                486, 483, 488, 485, 490, 487, 492, 489, 494, 493, 491, 497, 496, 499, 498, 495, 502, 500, 504, 501, 506, 
                505, 503, 509, 508, 511, 507, 513, 510, 515, 516, 517, 512, 519, 514, 521, 520, 518, 524, 525, 523, 522, 
                528, 526, 530, 531, 529, 527, 534, 533, 536, 535, 532, 539, 540, 538, 537, 543, 544, 541, 546, 542, 548, 
                547, 550, 551, 549, 545, 554, 553, 556, 552, 558, 559, 557, 555, 562, 561, 564, 560, 566, 567, 565, 569, 
                568, 563, 572, 573, 570, 575, 571, 577, 576, 574, 580, 581, 579, 578, 584, 583, 582, 587, 585, 589, 586, 
                591, 590, 593, 592, 588, 596, 597, 595, 594, 600, 599, 602, 598, 604, 601, 606, 605, 603, 609, 608, 607, 
                612, 613, 614, 615, 611, 610, 618, 617, 616, 621, 619, 623, 624, 625, 622, 627, 626, 629, 628, 620, 632, 
                631, 630, 635, 634, 637, 636, 633, 640, 639, 642, 638, 644, 641, 646, 647, 645, 643, 650, 651, 652, 653, 
                649, 648, 656, 657, 655, 654, 660, 661, 659, 663, 658, 665, 662, 667, 666, 664, 670, 669, 668, 673, 671, 
                675, 674, 677, 678, 676, 672, 681, 680, 679, 684, 682, 686, 687, 685, 689, 688, 683, 692, 693, 691, 695, 
                696, 697, 690, 699, 700, 698, 694, 703, 701, 705, 704, 702, 708, 707, 706, 711, 712, 710, 709, 715, 713, 
                717, 714, 719, 718, 716, 722, 723, 721, 720, 726, 725, 724, 729, 730, 728, 732, 727, 734, 731, 736, 733, 
                738, 735, 740, 739, 737, 743, 742, 741, 746, 747, 745, 744, 750, 751, 749, 748, 754, 755, 753, 752, 758, 
                759, 757, 761, 762, 760, 756, 765, 764, 763, 768, 769, 767, 766, 772, 773, 774, 771, 770, 777, 778, 776, 
                775, 781, 779, 783, 780, 785, 782, 787, 786, 789, 788, 784, 792, 790, 794, 791, 796, 795, 798, 797, 793, 
                801, 800, 799, 804, 803, 806, 805, 802, 809, 810, 808, 807, 813, 814, 812, 811, 817, 815, 819, 820, 821, 
                818, 816, 824, 825, 823, 827, 822, 829, 828, 826, 832, 833, 830, 835, 834, 831, 838, 837, 836, 841, 840, 
                843, 844, 842, 839, 847, 845, 849, 848, 851, 850, 846, 854, 853, 852, 857, 856, 859, 858, 855, 862, 861, 
                864, 860, 866, 863, 868, 869, 867, 865, 872, 870, 874, 875, 871, 877, 878, 876, 880, 873, 882, 881, 879, 
                885, 884, 887, 886, 883, 890, 891, 889, 888, 894, 895, 892, 897, 898, 896, 893, 901, 900, 903, 902, 899, 
                906, 905, 908, 907, 904, 911, 909, 913, 910, 915, 916, 914, 912, 919, 917, 921, 918, 923, 920, 925, 924, 
                922, 928, 929, 927, 931, 926, 933, 934, 932, 930, 937, 936, 935, 940, 941, 939, 938, 944, 945, 946, 943, 
                942, 949, 948, 947, 952, 951, 950, 955, 953, 957, 956, 954, 960, 961, 959, 958, 964, 965, 962, 967, 968, 
                966, 963, 971, 970, 973, 974, 969, 976, 972, 978, 977, 980, 981, 979, 975, 984, 982, 986, 987, 983, 989, 
                988, 985, 992, 991, 990, 995, 996, 993, 998, 997, 1000, 999, 994
            };/*1201*/
            //caso 2
            /*{ 2, 4, 3, 6, 1, 8, 7, 5, 11, 12, 10, 9, 15, 16, 13, 18, 14, 20, 19, 17, 23, 22, 25, 26, 21, 28, 24, 30, 27,
                32, 33, 31, 29, 36, 35, 38, 37, 40, 39, 34, 43, 44, 42, 41, 47, 46, 45, 50, 48, 52, 53, 51, 55, 49, 57,
                54, 59, 60, 58, 56, 63, 61, 65, 64, 62, 68, 67, 66, 71, 72, 70, 69, 75, 74, 73, 78, 76, 80, 81, 77, 83,
                82, 79, 86, 84, 88, 85, 90, 91, 89, 87, 94, 92, 96, 97, 95, 93, 100, 99, 102, 103, 98, 105, 101, 107, 106,
                104, 110, 109, 112, 111, 108, 115, 113, 117, 114, 119, 118, 116, 122, 120, 124, 123, 121, 127, 126, 125,
                130, 129, 128, 133, 134, 132, 136, 135, 131, 139, 137, 141, 138, 143, 140, 145, 144, 142, 148, 149, 147,
                146, 152, 153, 151, 150, 156, 157, 154, 159, 160, 155, 162, 161, 158, 165, 163, 167, 168, 164, 170, 169,
                166, 173, 172, 171, 176, 175, 174, 179, 180, 178, 177, 183, 181, 185, 184, 182, 188, 189, 190, 191, 187,
                186, 194, 193, 192, 197, 198, 199, 195, 201, 200, 196, 204, 203, 202, 207, 208, 206, 205, 211, 209, 213,
                214, 212, 210, 217, 218, 219, 216, 215, 222, 221, 220, 225, 226, 223, 228, 224, 230, 231, 229, 227, 234,
                232, 236, 235, 233, 239, 238, 241, 240, 243, 242, 237, 246, 245, 244, 249, 250, 248, 247, 253, 252, 255,
                251, 257, 258, 254, 260, 256, 262, 261, 264, 265, 263, 259, 268, 267, 266, 271, 270, 273, 269, 275, 274,
                272, 278, 277, 280, 279, 282, 276, 284, 281, 286, 283, 288, 289, 287, 285, 292, 291, 290, 295, 294, 293,
                298, 297, 296, 301, 300, 299, 304, 305, 306, 307, 303, 302, 310, 308, 312, 311, 309, 315, 314, 313, 318,
                317, 320, 316, 322, 323, 324, 325, 321, 319, 328, 327, 330, 326, 332, 331, 329, 335, 334, 337, 333, 339,
                338, 336, 342, 343, 341, 340, 346, 345, 348, 349, 347, 351, 350, 344, 354, 352, 356, 355, 353, 359, 358,
                357, 362, 361, 364, 365, 360, 367, 366, 363, 370, 371, 369, 368, 374, 373, 372, 377, 376, 379, 380, 378,
                382, 383, 375, 385, 384, 381, 388, 387, 386, 391, 392, 390, 389, 395, 394, 397, 393, 399, 400, 396, 402,
                401, 404, 398, 406, 405, 408, 403, 410, 409, 412, 407, 414, 413, 416, 411, 418, 415, 420, 419, 417, 423,
                422, 421, 426, 427, 424, 429, 430, 428, 425, 433, 432, 431, 436, 435, 434, 439, 438, 441, 442, 443, 444,
                440, 437, 447, 446, 445, 450, 449, 448, 453, 454, 452, 456, 455, 451, 459, 460, 458, 457, 463, 464, 462,
                466, 465, 461, 469, 467, 471, 470, 468, 474, 475, 476, 473, 478, 472, 480, 481, 479, 477, 484, 483, 486,
                485, 482, 489, 488, 487, 492, 493, 494, 491, 490, 497, 495, 499, 498, 496, 502, 503, 504, 500, 506, 501,
                508, 505, 510, 507, 512, 511, 509, 515, 514, 513, 518, 519, 516, 521, 520, 517, 524, 523, 526, 525, 522,
                529, 528, 527, 532, 533, 534, 530, 536, 531, 538, 539, 537, 535, 542, 540, 544, 543, 541, 547, 545, 549,
                548, 551, 546, 553, 552, 550, 556, 557, 555, 554, 560, 558, 562, 561, 559, 565, 564, 567, 566, 563, 570,
                571, 569, 573, 572, 568, 576, 575, 578, 579, 580, 577, 574, 583, 582, 581, 586, 587, 585, 589, 584, 591,
                592, 593, 590, 595, 594, 588, 598, 596, 600, 599, 597, 603, 604, 602, 606, 605, 601, 609, 610, 608, 612,
                613, 611, 607, 616, 615, 614, 619, 618, 617, 622, 621, 620, 625, 626, 624, 623, 629, 628, 631, 632, 630,
                627, 635, 636, 637, 634, 639, 633, 641, 640, 643, 642, 645, 638, 647, 648, 649, 646, 644, 652, 653, 651,
                650, 656, 657, 655, 659, 658, 654, 662, 663, 661, 660, 666, 667, 665, 664, 670, 669, 668, 673, 672, 671,
                676, 675, 674, 679, 680, 681, 678, 677, 684, 683, 682, 687, 688, 686, 685, 691, 690, 689, 694, 693, 696,
                697, 692, 699, 700, 698, 695, 703, 702, 701, 706, 704, 708, 709, 707, 705, 712, 711, 710, 715, 716, 714,
                718, 717, 713, 721, 720, 723, 722, 719, 726, 727, 724, 729, 728, 725, 732, 731, 734, 730, 736, 737, 733,
                739, 735, 741, 740, 738, 744, 745, 746, 742, 748, 749, 743, 751, 750, 753, 752, 747, 756, 754, 758, 759,
                755, 761, 762, 760, 757, 765, 764, 763, 768, 767, 766, 771, 769, 773, 774, 772, 770, 777, 776, 775, 780,
                779, 782, 778, 784, 785, 783, 781, 788, 789, 786, 791, 792, 787, 794, 790, 796, 793, 798, 799, 797, 795,
                802, 801, 800, 805, 806, 807, 804, 803, 810, 811, 809, 808, 814, 813, 816, 815, 812, 819, 820, 821, 818,
                823, 817, 825, 822, 827, 826, 824, 830, 828, 832, 831, 829, 835, 833, 837, 838, 839, 836, 834, 842, 843,
                840, 845, 846, 844, 848, 841, 850, 849, 847, 853, 852, 851, 856, 857, 854, 859, 855, 861, 862, 858, 864,
                865, 863, 867, 868, 866, 860, 871, 872, 870, 869, 875, 876, 877, 874, 873, 880, 879, 882, 883, 881, 878,
                886, 887, 885, 889, 884, 891, 892, 890, 888, 895, 896, 894, 893, 899, 900, 898, 902, 897, 904, 905, 903,
                901, 908, 909, 910, 911, 906, 913, 912, 907, 916, 915, 918, 919, 920, 917, 914, 923, 924, 921, 926, 927,
                928, 925, 922, 931, 930, 929, 934, 933, 932, 937, 936, 935, 940, 941, 939, 938, 944, 945, 943, 942, 948,
                947, 946, 951, 949, 953, 952, 950, 956, 957, 958, 955, 960, 954, 962, 963, 959, 965, 961, 967, 964, 969,
                968, 971, 966, 973, 972, 975, 976, 974, 970, 979, 980, 978, 977, 983, 982, 985, 984, 981, 988, 989, 986,
                991, 992, 990, 987, 995, 994, 997, 996, 993};/*1208*/
            minimumBribes(q);
        }
        /*
         * Complete the 'minimumBribes' function below.
         *
         * The function accepts INTEGER_ARRAY q as parameter.
         */
        //out time
        /* in this case I realize that the positions are important in what 
         * position minus the number in the position is subtracted, the 
         * complex part here is in the use of LINQ to count the amount of 
         * larger numbers in a list created with the numbers that are out 
         * of position backwards and thus find which are the ones who bribed 
         * themselves and those who in turn bribed others.*/
        public static void minimumBribes(List<int> q)
        {
            int countBribes = 0;
            List<int> listAux = new List<int>();

            int ecuac = 0;
            for (int i = 0; i < q.Count; i++)
            {
                ecuac = q[i] - (i + 1);
                if (ecuac > 2)
                {
                    Console.WriteLine("Too chaotic");
                    return;
                }
                if (ecuac > 0 && ecuac <= 2)
                {
                    countBribes += ecuac;
                }
                if (ecuac <= 0)
                {
                    if (listAux.Count != 0)
                    {
                        countBribes += listAux.AsQueryable().Count(p => p > q[i]);
                        if (listAux.Count == 3)
                        {
                            int pos = listAux.IndexOf(listAux.Min());
                            listAux[pos] = q[i];
                        }
                        else listAux.Add(q[i]);
                    }
                    else listAux.Add(q[i]);
                }
                
            }

            Console.WriteLine(countBribes);
        }/**/
        /*
         * In this case, brute force is used, where the entire row is traversed 
         * from back to front, organizing it and checking each step that was fixed, 
         * I never thought it would work for me but it did, it passed the test, 
         * although it is an example of brute force and I do not like it.
         */
        public static void minimumBribes1(List<int> q)
        {
            int total = 0;

            for (int i = q.Count - 1; i >= 0; i--)
            {
                int pos = q[i] - 1 - i;
                if (pos == 1)
                {
                    total++;
                    q = Swap(q, i, i + 1);
                    i++;
                }
                else if (pos == 2)
                {
                    total += 2;
                    q = Swap(q, i, i + 2);
                    q = Swap(q, i, i + 1);
                    i += 2;
                }
                else if (pos > 2)
                {
                    Console.WriteLine("Too chaotic");
                    return;
                }
            }
            Console.WriteLine(total);
        }
        public static List<int> Swap(List<int> q, int left, int right)
        {
            int temp = q[left];
            q[left] = q[right];
            q[right] = temp;
            return q;
        }/**/
        // out time
        /*
         *in this case I go through the list, playing with the positions,
         *where the number is subtracted minus the position it is in, the 
         *negative part is that I need to find what I do not see and it is 
         *the numbers that were bribed to advance, that's why I know it does 
         *another loop and that's the part where the program slows down.
         */
        public static void minimumBribes2(List<int> q)
        {
            int countBribes = 0;
            for (int i = 0; i < q.Count; i++)
            {
                if (q[i] - (i + 1) > 2)
                {
                    Console.WriteLine("Too chaotic");
                    return;
                }
                for (int j = 0; j < i; j++)
                    if (q[j] >  q[i])
                        countBribes++;
            }
            Console.WriteLine(countBribes);            
        }
        /*
         *In this case I go through the list, I create three variables 
         *so that they follow the entire route with me, since a number 
         *can only skip another 2, if it is more than that then it is too much.
         */
        public static void minimumBribes3(List<int> q)
        {
            int countBribes = 0;
            int pos1 = 1, pos2 = 2, pos3 = 3;

            for (int i = 0; i < q.Count; i++)
            {
                if (q[i] == pos1)
                {
                    pos1 = pos2;
                    pos2 = pos3;
                    pos3++;
                }
                else if (q[i] == pos2)
                {
                    countBribes++;
                    pos2 = pos3;
                    pos3++;
                }
                else if (q[i] == pos3)
                {
                    countBribes += 2;
                    pos3++;
                }
                else
                {
                    Console.WriteLine("Too chaotic");
                    return;
                }
            }
            Console.WriteLine(countBribes);
        }

    }
}
